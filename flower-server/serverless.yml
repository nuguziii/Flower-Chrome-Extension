# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: FpAPI
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-webpack
  - serverless-offline
custom:
  webpack:
    webpackConfig: ./webpack.config.js
provider:
  name: aws
  runtime: nodejs10.x
  apiGateway: # Optional API Gateway global config
    restApiId: 2p8ue30rj6 # REST API resource ID. Default is generated by the framework
    restApiRootResourceId: yzzy403pmc # Root resource ID, represent as / path
    restApiResources: # List of existing resources that were created in the REST API. This is required or the stack will be conflicted
      #'/users': hxfo3j
      #'/users/{userId}': 0v6y25
      #'/users/{userId}/projects': 8cdfjh
      #'/users/{userId}/projects/{projectId}': 7fuw8k
      #'/users/{userId}/projects/{projectId}/nodes': g0ldnb
# you can overwrite defaults here
#  stage: beta
  region: ap-northeast-2

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - ../memos/handler.js
#    - ../../config/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getMemos:
    name: f1
    handler: src/memos/handler.getMemos
    role: arn:aws:iam::616448378550:role/service-role/lambdaRole
          
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /memos
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qJ2JLSgrM
            
    
  postMemos:
    name: f2
    handler: src/memos/handler.postMemos
    role: arn:aws:iam::616448378550:role/service-role/lambdaRole
          
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /memos
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qJ2JLSgrM

  deleteMemos:
    name: f3
    handler: src/memos/handler.deleteMemos
    role: arn:aws:iam::616448378550:role/service-role/lambdaRole
          
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /memos/{memoId}
          method: delete
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qJ2JLSgrM
  

  postUser:
    name: f4
    handler: src/users/handler.postUser
    role: arn:aws:iam::616448378550:role/service-role/lambdaRole
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /users
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qJ2JLSgrM

  getProject:
    name: f5
    handler: src/projects/handler.readProject
    role: arn:aws:iam::616448378550:role/service-role/lambdaRole
          
#    the following are a few example events you can configure
#    note: please make sure to change your handler code to work with those events
#    check the event documentation for details
    events:
      - http:
          path: /projects
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qJ2JLSgrM
  postProject:
    name: f6
    handler: src/projects/handler.postProject
    role: arn:aws:iam::616448378550:role/service-role/lambdaRole
          
#    the following are a few example events you can configure
#    note: please make sure to change your handler code to work with those events
#    check the event documentation for details
    events:
      - http:
          path: /projects
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qJ2JLSgrM

  addMemoToProject:
    name: m9
    handler: src/projects/handler.addMemoToProject
          
#    the following are a few example events you can configure
#    note: please make sure to change your handler code to work with those events
#    check the event documentation for details
    events:
      - http:
          path: /projects/{projectId}
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qj2jlsgrm

  postShareLink:
    name: f7
    handler: src/projects/handler.createShareLink
    role: arn:aws:iam::616448378550:role/service-role/lambdaRole
          
#    the following are a few example events you can configure
#    note: please make sure to change your handler code to work with those events
#    check the event documentation for details
    events:
      - http:
          path: /projects/{projectId}/share
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qJ2JLSgrM

  followProject:
    name: f8
    handler: src/projects/handler.shareProjectToUser
    role: arn:aws:iam::616448378550:role/service-role/lambdaRole
          
#    the following are a few example events you can configure
#    note: please make sure to change your handler code to work with those events
#    check the event documentation for details
    events:
      - http:
          path: /share
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qJ2JLSgrM

  getTags:
    name: f9
    handler: src/tags/handler.getTags
    role: arn:aws:iam::616448378550:role/service-role/lambdaRole
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /tags
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qJ2JLSgrM
            

  postTags:
    name: f10
    handler: src/tags/handler.postTags
    role: arn:aws:iam::616448378550:role/service-role/lambdaRole
          
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /tags
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-northeast-2:616448378550:userpool/ap-northeast-2_qJ2JLSgrM

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
